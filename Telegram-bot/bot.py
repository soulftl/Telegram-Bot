import telebot
import telebot.types as types
from datetime import datetime, timedelta
import logging
import os
import time

# –î–ª—è Selenium
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

from config import BOT_TOKEN, ADMIN_IDS, NEWS_CATEGORIES, NEWS_CATEGORY_NAMES, NEWS_STOPWORDS, NEWS_SOURCES, YAROSLAVL_CENTER, YAROSLAVL_CENTER_MAP_IMAGE_URL, MAP_CATEGORY_MAPPING, REVERSE_MAP_CATEGORY_MAPPING, CLEAN_CATEGORY_NAME_MAPPING, EVENT_CATEGORY_MAPPING, REVERSE_CATEGORY_MAPPING, REVERSE_EVENT_CATEGORY_MAPPING
from news import get_yarnews_articles, get_weather_news, get_weekly_news
from weather import get_openmeteo_weather, format_weather_message, get_weather_description, generate_temperature_graph
from events import get_events_by_category, format_event_message, event_types
from locations import get_locations_by_category, get_location_info, LOCATIONS
from about_city import YAROSLAVL_INFO
from history_parser import HistoryParser
from keyboards import create_main_keyboard, create_about_city_keyboard, create_location_keyboard, create_support_keyboard, create_admin_panel_keyboard, create_map_keyboard, create_history_keyboard, create_two_column_keyboard, create_events_keyboard

from telebot.storage import StateMemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotState(telebot.State):
    MAIN_MENU = "main_menu"
    NEWS_MENU = "news_menu"
    ABOUT_CITY_MENU = "about_city_menu"
    HISTORY_MENU = "history_menu"
    TRANSPORT_MENU = "transport_menu"
    MAP_MENU = "map_menu"
    EVENTS_MENU = "events_menu"
    HELP_MENU = "help_menu"
    NEWS_CATEGORIES = "news_categories"
    WEATHER_NEWS = "weather_news"
    WEEKLY_NEWS = "weekly_news"
    DAILY_REMINDER = "daily_reminder"
    WAITING_BUS_ROUTE = "waiting_bus_route"
    WAITING_BUS_STOP = "waiting_bus_stop"
    WAITING_TRAM_ROUTE = "waiting_tram_route"
    WAITING_TRAM_STOP = "waiting_tram_stop"
    WAITING_TROLLEYBUS_ROUTE = "waiting_trolleybus_route"
    WAITING_TROLLEYBUS_STOP = "waiting_trolleybus_stop"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
history_parser = HistoryParser()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def save_user_state(chat_id, state):
    """Save user state to memory."""
    user_states[chat_id] = state

def get_user_state(chat_id):
    """Get user state from memory."""
    return user_states.get(chat_id, {})

def create_main_keyboard():
    """Create main menu keyboard."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏"))
    keyboard.row(
        types.KeyboardButton("üèõÔ∏è –û –≥–æ—Ä–æ–¥–µ"),
        types.KeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è")
    )
    keyboard.add(types.KeyboardButton("üÜò –ü–æ–º–æ—â—å"))
    return keyboard

def create_news_keyboard():
    """Create keyboard for news section."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üì∞ –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"))
    keyboard.add(types.KeyboardButton("üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    keyboard.add(types.KeyboardButton("üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"))
    keyboard.add(types.KeyboardButton("üèõ –ö—É–ª—å—Ç—É—Ä–∞"))
    keyboard.add(types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"))
    keyboard.add(types.KeyboardButton("üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_about_city_keyboard():
    """Create keyboard for About City section."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ø—Ä–æ—Å–ª–∞–≤–ª—è"),
        types.KeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è –Ø—Ä–æ—Å–ª–∞–≤–ª—è")
    )
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_events_keyboard():
    """Create keyboard for events section."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üé≠ –ö—É–ª—å—Ç—É—Ä–∞"),
        types.KeyboardButton("‚öΩ –°–ø–æ—Ä—Ç")
    )
    keyboard.row(
        types.KeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"),
        types.KeyboardButton("üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
    )
    keyboard.row(
        types.KeyboardButton("üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã")
    )
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return str(user_id) in ADMIN_IDS

def go_to_main_menu(message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    markup = create_main_keyboard()
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=markup
    )
    save_user_state(message.chat.id, {'state': 'main_menu'})

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name or message.from_user.username or "–≥–æ—Å—Ç—å"
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ø—Ä–æ—Å–ª–∞–≤–ª—è, {user_name}!"
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=create_main_keyboard()
    )
    save_user_state(message.chat.id, {'state': 'main_menu'})

@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –Ø—Ä–æ—Å–ª–∞–≤–ª—è. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã\n\n"
        "üå§ –ü–æ–≥–æ–¥–∞:\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
        "- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n"
        "- –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
        "üìÖ –°–æ–±—ã—Ç–∏—è:\n"
        "- –ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "- –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "- –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è\n\n"
        "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "- –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "- –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "- –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá"
    )
    
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.add(types.KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"))
    markup.add(types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    
    bot.send_message(
        message.chat.id,
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=markup
    )
    save_user_state(message.chat.id, {'state': 'main_menu'})

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def handle_back_button(message):
    """Handle back button press."""
    user_state = get_user_state(message.chat.id)
    current_state = user_state.get('state', 'main_menu')
    
    if current_state == 'news_menu':
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=create_main_keyboard()
        )
        save_user_state(message.chat.id, {'state': 'main_menu'})
    elif current_state == 'about_city_menu':
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=create_main_keyboard()
        )
        save_user_state(message.chat.id, {'state': 'main_menu'})
    elif current_state == 'events_menu':
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=create_main_keyboard()
        )
        save_user_state(message.chat.id, {'state': 'main_menu'})
    else:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=create_main_keyboard()
        )
        save_user_state(message.chat.id, {'state': 'main_menu'})

@bot.message_handler(func=lambda message: message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
def show_news_menu(message):
    """Show news menu."""
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=create_news_keyboard()
    )
    save_user_state(message.chat.id, {'state': 'news_menu'})

@bot.message_handler(func=lambda message: message.text in ["üì∞ –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "üèõ –ö—É–ª—å—Ç—É—Ä–∞", "üå§ –ü–æ–≥–æ–¥–∞", "üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"])
def handle_news_category(message):
    """Handle news category selection."""
    category_mapping = {
        "üì∞ –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏": "general",
        "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "transport",
        "üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": "construction",
        "üèõ –ö—É–ª—å—Ç—É—Ä–∞": "culture",
        "üå§ –ü–æ–≥–æ–¥–∞": "weather",
        "üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è": "administration"
    }
    
    category = category_mapping.get(message.text)
    if category:
        news = get_yarnews_articles(category)
        if news:
            for article in news[:5]:  # Show only 5 most recent articles
                bot.send_message(
                    message.chat.id,
                    f"üì∞ *{article['title']}*\n\n{article['text']}\n\nüîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({article['url']})",
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
        else:
            bot.send_message(
                message.chat.id,
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."
        )

@bot.message_handler(func=lambda message: message.text == "üìà –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
def handle_weekly_news(message):
    """Handle weekly news request."""
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é...‚è≥")
    try:
        articles = get_weekly_news()
        if articles:
            for article in articles:
                bot.send_message(
                    message.chat.id,
                    f"üì∞ {article['title']}\n\n{article['description']}\n\nüîó {article['link']}",
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"Error fetching weekly news: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

@bot.message_handler(func=lambda message: message.text == "üå¶ –ù–æ–≤–æ—Å—Ç–∏ –æ –ø–æ–≥–æ–¥–µ")
def handle_weather_news(message):
    """Handle weather news request."""
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –æ –ø–æ–≥–æ–¥–µ...‚è≥")
    try:
        articles = get_weather_news()
        if articles:
            for article in articles:
                bot.send_message(
                    message.chat.id,
                    f"üå¶ {article['title']}\n\n{article['description']}\n\nüîó {article['link']}",
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ –æ –ø–æ–≥–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"Error fetching weather news: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ø–æ–≥–æ–¥–µ.")

@bot.message_handler(func=lambda message: message.text == "üèõÔ∏è –û –≥–æ—Ä–æ–¥–µ")
def show_city_info(message):
    """Show information about Yaroslavl."""
    try:
        detailed_text = (
            "üèõÔ∏è –Ø—Ä–æ—Å–ª–∞–≤–ª—å ‚Äî –∂–µ–º—á—É–∂–∏–Ω–∞ –ó–æ–ª–æ—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞ –†–æ—Å—Å–∏–∏\n\n"
            "üìú –û—Å–Ω–æ–≤–∞–Ω –≤ 1010 –≥–æ–¥—É –∫–Ω—è–∑–µ–º –Ø—Ä–æ—Å–ª–∞–≤–æ–º –ú—É–¥—Ä—ã–º\n"
            "üåü –í—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –í—Å–µ–º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –Æ–ù–ï–°–ö–û\n\n"
            "üåä –ì–æ—Ä–æ–¥ –Ω–∞ –í–æ–ª–≥–µ —Å —Ç—ã—Å—è—á–µ–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π\n"
            "üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: –±–æ–ª–µ–µ 600 —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫\n\n"
            "üé≠ –ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –ü–æ–≤–æ–ª–∂—å—è:\n"
            "‚Ä¢ –ü–µ—Ä–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∞—Ç—Ä\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–º—ã –∏ –º–æ–Ω–∞—Å—Ç—ã—Ä–∏\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ –≤—ã—Å—Ç–∞–≤–∫–∏\n\n"
            "üèÜ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n"
            "‚Ä¢ –í–µ–¥—É—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –∏ –Ω–∞—É—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏\n\n"
            "üå≥ –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –≥–æ—Ä–æ–¥:\n"
            "‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ –ø–∞—Ä–∫–∏ –∏ –Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã\n"
            "‚Ä¢ –ë–æ–≥–∞—Ç–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n\n"
            "‚ú® –Ø—Ä–æ—Å–ª–∞–≤–ª—å ‚Äî –≥–¥–µ –∏—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å—é! ‚ú®"
        )

        bot.send_message(
            message.chat.id,
            detailed_text,
            reply_markup=create_about_city_keyboard()
        )
        save_user_state(message.chat.id, {'state': 'about_city_menu'})

    except Exception as e:
        logger.error(f"Error showing city info: {e}")
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ.")

@bot.message_handler(func=lambda message: message.text == "üìÖ –°–æ–±—ã—Ç–∏—è")
def show_events_menu(message):
    """Show events menu."""
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=create_events_keyboard()
    )
    save_user_state(message.chat.id, {'state': 'events_menu'})

@bot.message_handler(func=lambda message: message.text in ["üé≠ –ö—É–ª—å—Ç—É—Ä–∞", "‚öΩ –°–ø–æ—Ä—Ç", "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏", "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã"])
def handle_event_category(message):
    """Handle event category selection."""
    category = message.text
    bot.send_message(message.chat.id, f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}...‚è≥")
    try:
        events = get_events_by_category(category)
        if events:
            for event in events:
                bot.send_message(
                    message.chat.id,
                    format_event_message(event),
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
        else:
            bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"Error fetching events: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")

@bot.message_handler(func=lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
def handle_help(message):
    """Handle help request."""
    help_text = (
        "üõü –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
        "‚ú® @NovostYARHelpBot\n\n"
        "–í –±–æ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
        "üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "üí¨ –û–±—â–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ! üöÄ"
    )
    bot.send_message(message.chat.id, help_text)

# Catch-all message handler for unknown commands/messages without specific state
@bot.message_handler(func=lambda message: True, state=None)
def handle_undefined_messages(message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} sent an undefined message: {message.text}")
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.", reply_markup=create_main_keyboard())

# Catch-all message handler for unknown commands/messages within a state
@bot.message_handler(func=lambda message: True, state='*' # Handles all messages if state is not None
)
def handle_all_messages_with_state(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    current_state = get_user_state(chat_id).get('state', 'main_menu')
    logger.info(f"User {user_id} (State: {current_state}) sent message: {message.text}")

def run_main_bot_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞."""
    logger.info("Starting main bot polling...")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logger.error(f"Error in main bot polling: {e}")
        time.sleep(5)
        run_main_bot_polling()

def get_route_schedule(route_number, stop_name, transport_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        stop_name_lower = stop_name.lower().strip()
        stop_name_variants = [
            stop_name_lower,
            stop_name_lower.replace('—É–ª–∏—Ü–∞', '—É–ª.'),
            stop_name_lower.replace('—É–ª.', '—É–ª–∏—Ü–∞'),
            stop_name_lower.replace('—É–ª–∏—Ü–∞', ''),
            stop_name_lower.replace('—É–ª.', ''),
            f'–æ—Ç–ø—Ä. –æ—Ç {stop_name_lower}',
            '–∫–æ–Ω–µ—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
            '–∫–æ–Ω–µ—á–Ω–∞—è',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞',
            '—á–∫–∞–ª–æ–≤–∞',
            '—É–ª —á–∫–∞–ª–æ–≤–∞',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞ (–∫–æ–Ω–µ—á–Ω–∞—è)',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞ (–∫–æ–Ω–µ—á–Ω–∞—è)',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞ (–∫–æ–Ω–µ—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞ (–∫–æ–Ω–µ—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞ –∫–æ–Ω–µ—á–Ω–∞—è',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞ –∫–æ–Ω–µ—á–Ω–∞—è',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞ (–∫)',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞ (–∫)',
            '—É–ª. —á–∫–∞–ª–æ–≤–∞ –∫',
            '—É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞ –∫',
            '–æ—Ç–ø—Ä. –æ—Ç —É–ª. —á–∫–∞–ª–æ–≤–∞',
            '–æ—Ç–ø—Ä. –æ—Ç —É–ª–∏—Ü–∞ —á–∫–∞–ª–æ–≤–∞'
        ]
        stop_name_variants.extend([v.capitalize() for v in stop_name_variants])
        
        logger.info(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {stop_name_variants}")

        if transport_type == 'bus':
            base_url = "https://yatrans.ru/?page_id=24"
        elif transport_type == 'tram':
            base_url = "https://yatrans.ru/?page_id=249"
        elif transport_type == 'trolleybus':
            base_url = "https://yatrans.ru/?page_id=26"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"

        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–ª—è {transport_type} –ø–æ URL: {base_url}")

        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_cdp_cmd('Network.setUserAgentOverride', {"userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'})
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.set_page_load_timeout(30)
        
        try:
            driver.get(base_url)
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "raspisaniel"))
            )
            
            page_title = driver.title
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
            
            if "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" not in page_title.lower() or transport_type not in page_title.lower():
                 logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
                 return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤"
            
            if transport_type == 'tram':
                route_links = driver.find_elements(By.CLASS_NAME, "rasp_link")
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(route_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã")
                
                route_found = False
                for link in route_links:
                    link_text = link.text.strip()
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç: {link_text}")
                    if link_text == route_number or (route_number.endswith('–∫') and link_text == route_number[:-1]):
                        route_found = True
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route_number}")
                        link.click()
                        break
                
                if not route_found:
                    logger.error(f"–ú–∞—Ä—à—Ä—É—Ç {route_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return f"–ú–∞—Ä—à—Ä—É—Ç {route_number} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                route_link_xpath = f"//a[contains(@class, 'rasp_link') and contains(@href, 'anc={route_number}')]"
                try:
                    route_link = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, route_link_xpath))
                    )
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route_number}")
                    route_link.click()
                except TimeoutException:
                    logger.error(f"Timeout –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Å—ã–ª–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ {route_number}")
                    return f"–ú–∞—Ä—à—Ä—É—Ç {route_number} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            logger.info(f"–ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ {route_number}")
            
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "raspisaniel"))
            )
            logger.info("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            page_source = driver.page_source
            logger.info("HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω")
            
            soup = BeautifulSoup(page_source, 'html.parser')
            
            schedule_box = None
            for stop_var in stop_name_variants:
                try:
                    stop_element = soup.find('h4', string=lambda text: text and stop_var.lower() in text.lower())
                    if stop_element:
                        schedule_box = stop_element.find_next_sibling('div', class_='rasp-rejs_box')
                        if not schedule_box:
                            schedule_box = stop_element.find_parent('div', class_='rasp-rejs_box')
                        if schedule_box:
                            logger.info(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_var}")
                        break
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_var}': {e}")
            
            if not schedule_box:
                logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route_number}.")
                return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_name}' –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ {route_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            schedule_items = schedule_box.find_all('div', class_='rasp-rejs_time')
            
            if not schedule_items:
                logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–ª–æ–∫–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_name}' –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ {route_number}.")
                return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_name}' –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ {route_number} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

            schedule_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ {route_number} –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ \'{stop_name}\':\n"
            for item in schedule_items:
                time_text = item.get_text(strip=True)
                if time_text:
                    schedule_text += f"- {time_text}\n"
            
            return schedule_text
            
        except TimeoutException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        except NoSuchElementException as e:
            logger.error(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        finally:
            driver.quit()
            logger.info("–ë—Ä–∞—É–∑–µ—Ä Selenium –∑–∞–∫—Ä—ã—Ç.")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_route_schedule: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ." 

if __name__ == "__main__":
    run_main_bot_polling() 