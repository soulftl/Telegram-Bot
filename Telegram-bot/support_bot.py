import telebot
from telebot import types
import logging
from datetime import datetime
from support_db import SupportDB
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
SUPPORT_BOT_TOKEN = '8121473822:AAGJ9lwlxrt1PQiRGKzI29wSw7Ve2Gy3CMg'
bot = telebot.TeleBot(SUPPORT_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SupportDB()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('support_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [
    1666258551,  # @soulftl - –∞–¥–º–∏–Ω
    858193022   # –µ—â–µ –æ–¥–∏–Ω –∞–¥–º–∏–Ω
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (FSM - –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)
user_states = {}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TICKET_CATEGORIES = {
    "üêû –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ": "bot_error",
    "üì± –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º": "interface_issue",
    "‚ùì –í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É": "functionality_question",
    "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π": "improvement_suggestion",
    "üÜò –î—Ä—É–≥–æ–µ": "other"
}

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
HELP_IMAGE_PATH = "Materials/helpTexBot.jpg"

def create_main_keyboard(is_admin=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
    :param is_admin: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"), types.KeyboardButton("üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"))
    if is_admin:
        keyboard.row(types.KeyboardButton("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    return keyboard

def create_admin_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("ÔøΩÔøΩ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"))
    keyboard.row(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π"),
        types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    )
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_category_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    categories = list(TICKET_CATEGORIES.keys())
    # –í—Å–µ –∫—Ä–æ–º–µ 'üÜò –î—Ä—É–≥–æ–µ'
    main_buttons = [types.KeyboardButton(name) for name in categories if name != "üÜò –î—Ä—É–≥–æ–µ"]
    for i in range(0, len(main_buttons), 2):
        if i + 1 < len(main_buttons):
            keyboard.row(main_buttons[i], main_buttons[i + 1])
        else:
            keyboard.row(main_buttons[i])
    # 'üÜò –î—Ä—É–≥–æ–µ' –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    keyboard.row(types.KeyboardButton("üÜò –î—Ä—É–≥–æ–µ"))
    # '‚ùå –û—Ç–º–µ–Ω–∞' –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

@bot.message_handler(commands=['start'])
def handle_start(message):
    """Handle /start command."""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        is_admin = user_id in ADMIN_IDS
        # Send welcome photo with caption
        try:
            with open('Materials/helpTexBot.jpg', 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ù–æ–≤–æ—Å—Ç–Ø–†!\n\n"
                           "ü§ù –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.\n\n"
                           "–ß—Ç–æ —è –º–æ–≥—É:\n"
                           "üìù –ü—Ä–∏–Ω—è—Ç—å –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É\n"
                           "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                           "üí¨ –°–≤—è–∑–∞—Ç—å –≤–∞—Å —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                           "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
                    reply_markup=create_main_keyboard(is_admin)
                )
        except Exception as e:
            logger.error(f"Error sending welcome photo: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            bot.send_message(
                message.chat.id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ù–æ–≤–æ—Å—Ç–Ø–†!\n\n"
                "ü§ù –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.\n\n"
                "–ß—Ç–æ —è –º–æ–≥—É:\n"
                "üìù –ü—Ä–∏–Ω—è—Ç—å –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É\n"
                "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                "üí¨ –°–≤—è–∑–∞—Ç—å –≤–∞—Å —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
                reply_markup=create_main_keyboard(is_admin)
            )
        
        # Reset user state
        if user_id in user_states:
            del user_states[user_id]
        
        logger.info(f"User {username} (ID: {user_id}) started the support bot")
        
    except Exception as e:
        logger.error(f"Error in handle_start: {e}")
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
def create_ticket(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_states[message.from_user.id] = {'state': 'waiting_category'}
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=create_category_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in TICKET_CATEGORIES.keys())
def handle_category_selection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if user_states.get(user_id, {}).get('state') != 'waiting_category':
        return

    category = TICKET_CATEGORIES[message.text]
    user_states[user_id] = {
        'state': 'waiting_ticket_subject',
        'category': category
    }
    
    bot.send_message(
        message.chat.id,
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
        "üîπ –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç\n"
        "üîπ –ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å\n"
        "üîπ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –ø—Ä–æ–±–ª–µ–º–µ\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏! üöÄ",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row(
            types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        )
    )

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
def show_user_tickets(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tickets = db.get_user_tickets(message.from_user.id)
    
    if not tickets:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.",
            reply_markup=create_main_keyboard(message.from_user.id in ADMIN_IDS)
        )
        return

    for ticket in tickets:
        status_emoji = "üü¢" if ticket['status'] == 'open' else "üî¥"
        ticket_text = (
            f"{status_emoji} –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}\n"
            f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {ticket['created_at']}\n"
            f"–¢–µ–º–∞: {ticket['subject']}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /ticket_{ticket['id']}"
        )
        bot.send_message(message.chat.id, ticket_text)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def show_admin_panel(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    bot.send_message(
        message.chat.id,
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_admin_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üì® –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
def show_open_tickets(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    if message.from_user.id not in ADMIN_IDS:
        return

    tickets = db.get_open_tickets()
    if not tickets:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    for ticket in tickets:
        ticket_text = (
            f"üü¢ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}\n"
            f"–û—Ç: {ticket['username']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {ticket['created_at']}\n"
            f"–¢–µ–º–∞: {ticket['subject']}\n\n"
            f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reply_{ticket['id']}"
        )
        bot.send_message(message.chat.id, ticket_text)

@bot.message_handler(func=lambda message: message.text and message.text.startswith('/ticket_'))
def view_ticket(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        ticket_id = int(message.text.split('_')[1])
        ticket = db.get_ticket(ticket_id)
        
        if not ticket or (ticket['user_id'] != message.from_user.id and message.from_user.id not in ADMIN_IDS):
            bot.send_message(message.chat.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
        status_emoji = "üü¢" if ticket['status'] == 'open' else "üî¥"
        ticket_text = (
            f"{status_emoji} –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}\n"
            f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {ticket['created_at']}\n"
            f"–¢–µ–º–∞: {ticket['subject']}\n\n"
            "–ü–µ—Ä–µ–ø–∏—Å–∫–∞:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in ticket['messages']:
            sender = "üë§ –í—ã" if msg['user_id'] == message.from_user.id else "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            ticket_text += f"\n{sender} ({msg['created_at']}):\n{msg['message']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if ticket['status'] == 'open':
            ticket_text += "\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reply_{ticket_id}"

        bot.send_message(message.chat.id, ticket_text)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text and message.text.startswith('/reply_'))
def reply_to_ticket(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    try:
        ticket_id = int(message.text.split('_')[1])
        ticket = db.get_ticket(ticket_id)
        
        if not ticket or (ticket['user_id'] != message.from_user.id and message.from_user.id not in ADMIN_IDS):
            bot.send_message(message.chat.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
            return

        if ticket['status'] != 'open':
            bot.send_message(message.chat.id, "–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
            return

        user_states[message.from_user.id] = {
            'state': 'waiting_reply',
            'ticket_id': ticket_id
        }
        
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
            )
        )

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_action(message):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    is_admin = user_id in ADMIN_IDS
    bot.send_message(
        message.chat.id,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=create_main_keyboard(is_admin)
    )

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def handle_back_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard(is_admin=True)
        )
    else:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    state = user_states.get(user_id, {}).get('state')

    if state == 'waiting_ticket_subject':
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        ticket_id = db.create_ticket(
            user_id=user_id,
            username=message.from_user.username or f"user_{user_id}",
            subject=message.text[:100]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–º—ã
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
        db.add_message(ticket_id, user_id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=create_main_keyboard(user_id in ADMIN_IDS)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}\n"
                    f"–û—Ç: {message.from_user.username or f'user_{user_id}'}\n"
                    f"–¢–µ–º–∞: {message.text[:100]}\n\n"
                    f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reply_{ticket_id}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]

    elif state == 'waiting_reply':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é
        ticket_id = user_states[user_id]['ticket_id']
        is_admin = user_id in ADMIN_IDS
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.add_message(ticket_id, user_id, message.text, is_admin=is_admin)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ
        ticket = db.get_ticket(ticket_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ
        recipient_id = ticket['user_id'] if is_admin else next(iter(ADMIN_IDS), None)
        if recipient_id:
            try:
                sender_type = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" if is_admin else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                bot.send_message(
                    recipient_id,
                    f"üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ #{ticket_id}\n"
                    f"{sender_type}: {message.text}\n\n"
                    f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reply_{ticket_id}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é {recipient_id}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=create_main_keyboard(is_admin)
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
def show_ticket_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    try:
        all_tickets = db.get_all_tickets()
        open_tickets = db.get_open_tickets()
        closed_tickets = [t for t in all_tickets if t['status'] == 'closed']
        today = datetime.now().date()
        today_tickets = [t for t in all_tickets if str(t['created_at']).startswith(str(today))]

        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:\n\n"
            f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {len(all_tickets)}\n"
            f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_tickets)}\n"
            f"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {len(closed_tickets)}\n"
            f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_tickets)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        bot.send_message(
            message.chat.id,
            stats_text,
            reply_markup=create_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in show_ticket_stats: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_admin_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è")
def search_ticket_start(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–∏—Å–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    user_states[message.from_user.id] = {'state': 'waiting_ticket_search'}
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row(
            types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'waiting_ticket_search')
def search_ticket_process(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É ID."""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states.pop(message.from_user.id, None)
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_admin_keyboard()
        )
        return

    try:
        ticket_id = int(message.text.strip())
        ticket = db.get_ticket(ticket_id)
        
        if not ticket:
            bot.send_message(
                message.chat.id,
                "–û–±—Ä–∞—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=create_admin_keyboard()
            )
        else:
            status_emoji = "üü¢" if ticket['status'] == 'open' else "üî¥"
            ticket_text = (
                f"{status_emoji} –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}\n"
                f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {ticket['created_at']}\n"
                f"–¢–µ–º–∞: {ticket['subject']}\n\n"
                "–ü–µ—Ä–µ–ø–∏—Å–∫–∞:\n"
            )
            
            for msg in ticket['messages']:
                sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if not msg['is_admin'] else "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
                ticket_text += f"\n{sender} ({msg['created_at']}):\n{msg['message']}\n"
            
            bot.send_message(
                message.chat.id,
                ticket_text,
                reply_markup=create_admin_keyboard()
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—Ä–∞—â–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=create_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in search_ticket_process: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_admin_keyboard()
        )
    
    user_states.pop(message.from_user.id, None)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
if __name__ == "__main__":
    logger.info("Support bot started")
    bot.infinity_polling() 