import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime, timedelta
import pytz
import os
from telebot.types import InputFile
import logging

class NewsParser:
    def __init__(self):
        self.base_url = "https://yaroslavl-region.ru"
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ø—Ä–æ—Å–ª–∞–≤–ª—è
        self.latitude = 57.6261
        self.longitude = 39.8845
        # URL –¥–ª—è OpenMeteo API
        self.weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={self.latitude}&longitude={self.longitude}&current=temperature_2m,relative_humidity_2m,weather_code,apparent_temperature&daily=weather_code,temperature_2m_max&timezone=Europe%2FMoscow&forecast_days=2"
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        # Get the absolute path to the Materials/weather directory
        self.weather_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'Materials', 'weather'))
        
        # Initialize logging
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–¥—ã –ø–æ–≥–æ–¥—ã OpenMeteo –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—à–∏–º –∏–∫–æ–Ω–∫–∞–º
        self.weather_codes = {
            0: {'condition': 'clear', 'description': '—è—Å–Ω–æ'},
            1: {'condition': 'partly-cloudy', 'description': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ'},
            2: {'condition': 'partly-cloudy', 'description': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'},
            3: {'condition': 'cloudy', 'description': '–ø–∞—Å–º—É—Ä–Ω–æ'},
            45: {'condition': 'fog', 'description': '—Ç—É–º–∞–Ω'},
            48: {'condition': 'fog', 'description': '—Ç—É–º–∞–Ω —Å –∏–Ω–µ–µ–º'},
            51: {'condition': 'light-rain', 'description': '–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å'},
            53: {'condition': 'rain', 'description': '—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å'},
            55: {'condition': 'rain', 'description': '—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å'},
            56: {'condition': 'sleet', 'description': '–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å'},
            57: {'condition': 'sleet', 'description': '—Å–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å'},
            61: {'condition': 'light-rain', 'description': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'},
            63: {'condition': 'rain', 'description': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å'},
            65: {'condition': 'heavy-rain', 'description': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'},
            66: {'condition': 'sleet', 'description': '–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å'},
            67: {'condition': 'sleet', 'description': '—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å'},
            71: {'condition': 'light-snow', 'description': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥'},
            73: {'condition': 'snow', 'description': '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥'},
            75: {'condition': 'snow', 'description': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥'},
            77: {'condition': 'snow', 'description': '—Å–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞'},
            80: {'condition': 'light-rain', 'description': '–Ω–µ–±–æ–ª—å—à–æ–π –ª–∏–≤–µ–Ω—å'},
            81: {'condition': 'rain', 'description': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å'},
            82: {'condition': 'heavy-rain', 'description': '—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å'},
            85: {'condition': 'light-snow', 'description': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å'},
            86: {'condition': 'snow', 'description': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å'},
            95: {'condition': 'thunderstorm', 'description': '–≥—Ä–æ–∑–∞'},
            96: {'condition': 'thunderstorm', 'description': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'},
            99: {'condition': 'thunderstorm', 'description': '—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'}
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã
        self.weather_icons = {
            'clear': {
                'emoji': '‚òÄÔ∏è',
                'gif': os.path.join(self.weather_dir, 'sunny.gif')
            },
            'partly-cloudy': {
                'emoji': 'üå§',
                'gif': os.path.join(self.weather_dir, 'partly_cloudy.gif')
            },
            'cloudy': {
                'emoji': '‚òÅÔ∏è',
                'gif': os.path.join(self.weather_dir, 'cloudy.gif')
            },
            'overcast': {
                'emoji': '‚òÅÔ∏è',
                'gif': os.path.join(self.weather_dir, 'cloudy.gif')
            },
            'light-rain': {
                'emoji': 'üåß',
                'gif': os.path.join(self.weather_dir, 'rain.gif')
            },
            'rain': {
                'emoji': 'üåß',
                'gif': os.path.join(self.weather_dir, 'rain.gif')
            },
            'heavy-rain': {
                'emoji': 'üåß',
                'gif': os.path.join(self.weather_dir, 'rain.gif')
            },
            'thunderstorm': {
                'emoji': '‚õà',
                'gif': os.path.join(self.weather_dir, 'storm.gif')
            },
            'light-snow': {
                'emoji': '‚ùÑÔ∏è',
                'gif': os.path.join(self.weather_dir, 'snow.gif')
            },
            'snow': {
                'emoji': '‚ùÑÔ∏è',
                'gif': os.path.join(self.weather_dir, 'snow.gif')
            },
            'sleet': {
                'emoji': 'üå®',
                'gif': os.path.join(self.weather_dir, 'snow.gif')
            },
            'fog': {
                'emoji': 'üå´',
                'gif': os.path.join(self.weather_dir, 'fog.gif')
            },
            'default': {
                'emoji': 'üå§',
                'gif': os.path.join(self.weather_dir, 'partly_cloudy.gif')
            }
        }

    def get_weather_icon(self, weather_condition):
        return self.weather_icons.get(weather_condition, self.weather_icons['default'])

    def get_weather(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
            response = requests.get(self.weather_url, headers=self.headers)
            response.raise_for_status()
            data = response.json()

            # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
            current = data['current']
            current_temp = round(current['temperature_2m'])
            feels_like = round(current['apparent_temperature'])
            weather_code = current['weather_code']
            weather_info = self.weather_codes.get(weather_code, {'condition': 'default', 'description': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
            current_desc = weather_info['description']
            weather_condition = weather_info['condition']

            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow_temp = round(data['daily']['temperature_2m_max'][1])
            tomorrow_weather_code = data['daily']['weather_code'][1]
            tomorrow_weather_info = self.weather_codes.get(tomorrow_weather_code, {'condition': 'default', 'description': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
            tomorrow_desc = tomorrow_weather_info['description']
            tomorrow_condition = tomorrow_weather_info['condition']

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –∑–∞–≤—Ç—Ä–∞
            current_date = datetime.now(self.moscow_tz).strftime('%d.%m.%y')
            tomorrow_date = (datetime.now(self.moscow_tz) + timedelta(days=1)).strftime('%d.%m.%y')

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏ –∑–∞–≤—Ç—Ä–∞
            current_weather_icon = self.get_weather_icon(weather_condition)
            tomorrow_weather_icon = self.get_weather_icon(tomorrow_condition)
            
            weather_text = (
                f"üìÖ {current_date}\n"
                f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C\n"
                f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                f"{current_weather_icon['emoji']} {current_desc.capitalize()}\n\n"
                f"üìÖ {tomorrow_date}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {tomorrow_temp}¬∞C\n"
                f"{tomorrow_weather_icon['emoji']} {tomorrow_desc.capitalize()}"
            )

            return [{
                'text': weather_text,
                'current_weather_gif': InputFile(current_weather_icon['gif'])
            }]

        except requests.exceptions.RequestException as e:
            self.logger.error(f"Request error while fetching weather: {e}")
            if hasattr(e.response, 'text'):
                self.logger.error(f"API response: {e.response.text}")
            return self.get_test_weather()
        except Exception as e:
            self.logger.error(f"Unexpected error while fetching weather: {e}")
            return self.get_test_weather()

    def get_test_weather(self):
        weather_icon = self.weather_icons['clear']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–ª–Ω–µ—á–Ω—É—é –∏–∫–æ–Ω–∫—É
        current_date = datetime.now(self.moscow_tz).strftime('%d.%m.%y')
        tomorrow_date = (datetime.now(self.moscow_tz) + timedelta(days=1)).strftime('%d.%m.%y')
        
        return [{
            "text": (
                f"üìÖ {current_date}\n"
                "üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +21¬∞C\n"
                "üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: +20¬∞C\n"
                "‚òÄÔ∏è –Ø—Å–Ω–æ\n\n"
                f"üìÖ {tomorrow_date}\n"
                "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +22¬∞C\n"
                "‚òÄÔ∏è –Ø—Å–Ω–æ"
            ),
            "current_weather_gif": InputFile(weather_icon['gif'])
        }]

    def get_news_by_category(self, category):
        try:
            if category == "üå§ –ü–æ–≥–æ–¥–∞":
                return self.get_weather()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            current_date = datetime.now(self.moscow_tz)
            week_ago = current_date - timedelta(days=7)
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ URL-–ø—É—Ç–∏ —Å–∞–π—Ç–∞
            category_urls = {
                "üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è": "https://city-yar.ru/news/",
                "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "https://city-yar.ru/news/transport/",
                "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": "https://city-yar.ru/news/construction/",
                "üìãüñã –ü–æ–ª–∏—Ç–∏–∫–∞": "https://city-yar.ru/news/politics/",
                "üè¢ –ì–æ—Ä–æ–¥—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è": "https://city-yar.ru/news/",
                "üé≠ –ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∂–∏–∑–Ω—å": "https://city-yar.ru/news/",
                "üì¢ –ê–Ω–æ–Ω—Å—ã": "https://city-yar.ru/news/"
            }

            url = category_urls.get(category, "https://city-yar.ru/news/")
            self.logger.info(f"Fetching news from URL: {url}")
            
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            response.encoding = 'utf-8'  # Explicitly set encoding
            
            soup = BeautifulSoup(response.text, 'html.parser')
            news_items = soup.find_all('div', class_='news-item')
            
            if not news_items:
                self.logger.warning(f"No news items found for category: {category}")
                return []
            
            news_list = []
            for item in news_items:
                title = item.find('h3').text.strip()
                date_elem = item.find('div', class_='news-date')
                date_str = date_elem.text.strip() if date_elem else current_date.strftime('%Y-%m-%d')
                
                # Convert date string to datetime object
                try:
                    if '-' in date_str:
                        item_date = datetime.strptime(date_str, '%Y-%m-%d')
                    else:
                        item_date = datetime.strptime(date_str, '%d.%m.%y')
                except ValueError:
                    continue
                
                # Skip news older than a week if we're getting weekly news
                if category == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é" and item_date < week_ago:
                    continue
                
                link = item.find('a')['href']
                if not link.startswith('http'):
                    link = 'https://city-yar.ru' + link
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                description = item.find('div', class_='news-excerpt')
                text = description.text.strip() if description else "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"
                
                news_list.append({
                    "title": title,
                    "date": date_str,
                    "text": text,
                    "link": link
                })
            
            return news_list
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"Request error while fetching news: {e}")
            return []
        except Exception as e:
            self.logger.error(f"Error parsing news: {e}")
            return []

    def get_test_news(self, category):
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        current_date = datetime.now(self.moscow_tz).strftime('%d.%m.%y')
        news = {
            "üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è": [
                {
                    "title": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –æ–±—Å—É–¥–∏–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–æ—Ä–æ–¥—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                    "date": current_date,
                    "text": "–í –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ—à–ª–æ —Å–æ–≤–µ—â–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –≥–æ—Ä–æ–¥—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. "
                           "–û–±—Å—É–∂–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥ –∏ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.",
                    "link": "https://yaroslavl-region.ru/news/1"
                }
            ],
            "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
                {
                    "title": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    "date": current_date,
                    "text": "–° 1 –∞–ø—Ä–µ–ª—è –≤–≤–æ–¥–∏—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ–±—É—Å–∞ ‚Ññ45. "
                           "–ò–∑–º–µ–Ω—è—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ1.",
                    "link": "https://yaroslavl-region.ru/news/2"
                }
            ],
            "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": [
                {
                    "title": "–ù–æ–≤—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –≤ –Ø—Ä–æ—Å–ª–∞–≤–ª–µ",
                    "date": current_date,
                    "text": "–ù–∞—á–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π' –≤ –ó–∞–≤–æ–ª–∂—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ. "
                           "–ö–æ–º–ø–ª–µ–∫—Å –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å 5 –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω—ã—Ö –¥–æ–º–æ–≤, –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥, —à–∫–æ–ª—É –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä. "
                           "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–∏—Ç –±–æ–ª–µ–µ 50 000 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤. "
                           "–°–¥–∞—á–∞ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ–Ω–µ—Ü 2025 –≥–æ–¥–∞. "
                           "–í –∫–æ–º–ø–ª–µ–∫—Å–µ –±—É–¥—É—Ç –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –ø–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥, –∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç—Å–∫–∏–µ –ø–ª–æ—â–∞–¥–∫–∏.",
                    "link": "https://yaroslavl-region.ru/news/3"
                }
            ],
            "üìãüñã –ü–æ–ª–∏—Ç–∏–∫–∞": [
                {
                    "title": "–ó–∞—Å–µ–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥—Å–∫–æ–π –¥—É–º—ã",
                    "date": current_date,
                    "text": "–ù–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥—Å–∫–æ–π –¥—É–º—ã –Ø—Ä–æ—Å–ª–∞–≤–ª—è –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –≥–æ—Ä–æ–¥–∞. "
                           "–î–µ–ø—É—Ç–∞—Ç—ã –æ–¥–æ–±—Ä–∏–ª–∏ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç –≥–æ—Ä–æ–¥–∞ –Ω–∞ 2024 –≥–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç "
                           "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
                    "link": "https://yaroslavl-region.ru/news/4"
                }
            ]
        }
        return news.get(category, [])

    def format_news_message(self, news_list):
        if not news_list:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        
        message = "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n\n"
        for news in news_list:
            # Convert date format if it's in YYYY-MM-DD format
            date = news['date']
            try:
                if '-' in date:
                    date_obj = datetime.strptime(date, '%Y-%m-%d')
                    date = date_obj.strftime('%d.%m.%y')
            except:
                pass  # Keep original date if conversion fails
            
            message += f"üìå {news['title']}\n"
            message += f"üìÖ {date}\n"
            message += f"üìù {news['text']}\n"
            message += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news['link']}\n"
            message += f"–ò—Å—Ç–æ—á–Ω–∏–∫: <a href='{news['link']}'>–Ø—Ä–ù–æ–≤–æ—Å—Ç–∏</a>\n"
        
        return message

    def get_events(self):
        try:
            url = "https://city-yar.ru/events/"
            self.logger.info(f"Fetching events from URL: {url}")
            
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            response.encoding = 'utf-8'  # Explicitly set encoding
            
            soup = BeautifulSoup(response.text, 'html.parser')
            event_items = soup.find_all('div', class_='event-item')
            
            if not event_items:
                self.logger.warning("No events found")
                return []
                
            events = []
            for item in event_items[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
                title = item.find('h3').text.strip()
                date_elem = item.find('div', class_='event-date')
                date = date_elem.text.strip() if date_elem else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                link = item.find('a')['href']
                if not link.startswith('http'):
                    link = 'https://city-yar.ru' + link
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                description = item.find('div', class_='event-text')
                text = description.text.strip() if description else "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"
                
                events.append({
                    "title": title,
                    "date": date,
                    "text": text,
                    "link": link
                })
            
            return events
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"Request error while fetching events: {e}")
            return self.get_test_events()
        except Exception as e:
            self.logger.error(f"Error parsing events: {e}")
            return self.get_test_events()

    def get_test_events(self):
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        current_date = datetime.now(self.moscow_tz).strftime('%d.%m.%y')
        next_week_date = (datetime.now(self.moscow_tz) + timedelta(days=7)).strftime('%d.%m.%y')
        return [
            {
                "title": "–§–µ—Å—Ç–∏–≤–∞–ª—å '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'",
                "date": current_date,
                "text": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –ø—Ä–æ–π–¥–µ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—å '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'. "
                       "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ: –≤—ã—Å—Ç–∞–≤–∫–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.",
                "link": "https://city-yar.ru/events/1"
            },
            {
                "title": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ —Å–ø–æ—Ä—Ç–∞'",
                "date": next_week_date,
                "text": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –ø—Ä–æ–π–¥–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ —Å–ø–æ—Ä—Ç–∞'. "
                       "–£—á–∞—Å—Ç–∏–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∂–µ–ª–∞—é—â–∏–µ.",
                "link": "https://city-yar.ru/events/2"
            }
        ] 

    def get_events_by_category(self, category):
        try:
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ URL-–ø—É—Ç–∏ —Å–∞–π—Ç–∞
            category_urls = {
                "üé≠ –ö—É–ª—å—Ç—É—Ä–∞": "https://city-yar.ru/events/culture/",
                "üé™ –°–ø–æ—Ä—Ç": "https://city-yar.ru/events/sport/",
                "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "https://city-yar.ru/events/education/"
            }

            url = category_urls.get(category, "https://city-yar.ru/events/")
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            event_items = soup.find_all('div', class_='event-item')
            
            if not event_items:
                return []
                
            events = []
            for item in event_items[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
                title = item.find('h3').text.strip()
                date_elem = item.find('div', class_='event-date')
                date = date_elem.text.strip() if date_elem else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                link = item.find('a')['href']
                if not link.startswith('http'):
                    link = 'https://city-yar.ru' + link
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                description = item.find('div', class_='event-text')
                text = description.text.strip() if description else "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"
                
                events.append({
                    "title": title,
                    "date": date,
                    "text": text,
                    "link": link
                })
            
            return events
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return self.get_test_events_by_category(category)

    def get_test_events_by_category(self, category):
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        current_date = datetime.now(self.moscow_tz).strftime('%d.%m.%y')
        next_week_date = (datetime.now(self.moscow_tz) + timedelta(days=7)).strftime('%d.%m.%y')
        two_weeks_date = (datetime.now(self.moscow_tz) + timedelta(days=14)).strftime('%d.%m.%y')
        test_events = {
            "üé≠ –ö—É–ª—å—Ç—É—Ä–∞": [
                {
                    "title": "–§–µ—Å—Ç–∏–≤–∞–ª—å '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'",
                    "date": current_date,
                    "text": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –ø—Ä–æ–π–¥–µ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—å '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'. "
                           "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ: –≤—ã—Å—Ç–∞–≤–∫–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.",
                    "link": "https://city-yar.ru/events/1"
                }
            ],
            "üé™ –°–ø–æ—Ä—Ç": [
                {
                    "title": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ —Å–ø–æ—Ä—Ç–∞'",
                    "date": next_week_date,
                    "text": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –ø—Ä–æ–π–¥–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ —Å–ø–æ—Ä—Ç–∞'. "
                           "–£—á–∞—Å—Ç–∏–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∂–µ–ª–∞—é—â–∏–µ.",
                    "link": "https://city-yar.ru/events/2"
                }
            ],
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": [
                {
                    "title": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä—É–º '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –∑–Ω–∞–Ω–∏–π'",
                    "date": two_weeks_date,
                    "text": "–í –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –ø—Ä–æ–π–¥–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä—É–º '–Ø—Ä–æ—Å–ª–∞–≤–ª—å - –≥–æ—Ä–æ–¥ –∑–Ω–∞–Ω–∏–π'. "
                           "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ: –ª–µ–∫—Ü–∏–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –¥–∏—Å–∫—É—Å—Å–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.",
                    "link": "https://city-yar.ru/events/3"
                }
            ]
        }
        return test_events.get(category, []) 