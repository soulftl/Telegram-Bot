import requests
from bs4 import BeautifulSoup
import logging
import os
from PIL import Image
from io import BytesIO
import aiohttp
import asyncio

class HistoryParser:
    def __init__(self):
        self.base_url = "https://www.yar.ru"
        self.cache_dir = "cache/history"
        os.makedirs(self.cache_dir, exist_ok=True)

    async def get_history_info(self, topic):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ç–µ–º–µ."""
        try:
            # Map topics to their respective URLs
            topic_urls = {
                "–ì–µ—Ä–±": "/about/history/gerb",
                "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "/about/history/architecture",
                "–Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π": "/about/history/yaroslav-mudry"
            }

            if topic not in topic_urls:
                return None

            url = self.base_url + topic_urls[topic]
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # Extract title
                        title = soup.find('h1').text.strip()
                        
                        # Extract main content
                        content = soup.find('div', class_='content')
                        if content:
                            text = content.get_text(strip=True)
                            
                            # Extract image
                            image = content.find('img')
                            image_url = None
                            if image and 'src' in image.attrs:
                                image_url = self.base_url + image['src']
                                # Download and save image
                                image_path = os.path.join(self.cache_dir, f"{topic.lower().replace(' ', '_')}.jpg")
                                if not os.path.exists(image_path):
                                    async with session.get(image_url) as img_response:
                                        if img_response.status == 200:
                                            img_data = await img_response.read()
                                            with open(image_path, 'wb') as f:
                                                f.write(img_data)
                                            image_url = image_path

                            return {
                                'title': title,
                                'text': text,
                                'image_url': image_url
                            }
            
            return None
        except Exception as e:
            logging.error(f"Error getting history info: {e}")
            return None

    def get_test_info(self, topic):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–º, –∫–æ–≥–¥–∞ —Å–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."""
        test_data = {
            "–ì–µ—Ä–±": {
                'title': "–ì–µ—Ä–± –Ø—Ä–æ—Å–ª–∞–≤–ª—è üêª",
                'text': (
                    "–ú–µ–¥–≤–µ–¥—å ‚Äî —Å–∏–º–≤–æ–ª —Å–∏–ª—ã, –º—É–∂–µ—Å—Ç–≤–∞ –∏ –º—É–¥—Ä–æ—Å—Ç–∏,\n"
                    "–∞ —Å–µ–∫–∏—Ä–∞ ‚Äî –≤–ª–∞—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –≥–æ—Ä–æ–¥–∞.\n\n"
                    "‚öîÔ∏è –õ–µ–≥–µ–Ω–¥–∞ –≥–ª–∞—Å–∏—Ç, —á—Ç–æ –∫–Ω—è–∑—å –Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π –ø–æ–±–µ–¥–∏–ª –º–µ–¥–≤–µ–¥—è –Ω–∞ –º–µ—Å—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.\n"
                    "–°–µ–≥–æ–¥–Ω—è –≥–µ—Ä–± ‚Äî –≥–æ—Ä–¥–æ—Å—Ç—å —è—Ä–æ—Å–ª–∞–≤—Ü–µ–≤ –∏ —É–∑–Ω–∞–≤–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ —Ñ–ª–∞–≥–µ, –∑–¥–∞–Ω–∏—è—Ö –∏ —Å—É–≤–µ–Ω–∏—Ä–∞—Ö."
                ),
                'image_url': "Materials/history_city/gerb.jpg"
            },
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": {
                'title': "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ø—Ä–æ—Å–ª–∞–≤–ª—è üèõÔ∏è",
                'text': (
                    "–ó–¥–µ—Å—å —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –¥—Ä–µ–≤–Ω–µ—Ä—É—Å—Å–∫–æ–µ –∑–æ–¥—á–µ—Å—Ç–≤–æ, –±–∞—Ä–æ–∫–∫–æ –∏ –∫–ª–∞—Å—Å–∏—Ü–∏–∑–º.\n\n"
                    "‚ú® –ì–ª–∞–≤–Ω—ã–µ –∂–µ–º—á—É–∂–∏–Ω—ã:\n"
                    "‚Ä¢ –°–ø–∞—Å–æ-–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –º–æ–Ω–∞—Å—Ç—ã—Ä—å ‚Äî —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞\n"
                    "‚Ä¢ –¶–µ—Ä–∫–æ–≤—å –ò–ª—å–∏ –ü—Ä–æ—Ä–æ–∫–∞ ‚Äî —à–µ–¥–µ–≤—Ä —Å —Ñ—Ä–µ—Å–∫–∞–º–∏\n"
                    "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–ª–∞, –±–µ–ª–æ–∫–∞–º–µ–Ω–Ω—ã–µ —Ñ–∞—Å–∞–¥—ã –∏ —Ä–µ–∑–Ω—ã–µ –Ω–∞–ª–∏—á–Ω–∏–∫–∏\n\n"
                    "üèÜ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –Ø—Ä–æ—Å–ª–∞–≤–ª—è ‚Äî –æ–±—ä–µ–∫—Ç –Æ–ù–ï–°–ö–û –∏ –≥–æ—Ä–¥–æ—Å—Ç—å –†–æ—Å—Å–∏–∏!"
                ),
                'image_url': "Materials/history_city/architecture.jpg"
            },
            "–Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π": {
                'title': "–Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π üëë",
                'text': (
                    "üìú –í 1010 –≥–æ–¥—É –æ–Ω –∑–∞–ª–æ–∂–∏–ª –Ø—Ä–æ—Å–ª–∞–≤–ª—å –Ω–∞ –º–µ—Å—Ç–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –º–µ–¥–≤–µ–¥–µ–º.\n\n"
                    "üåü –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–ª –ø–µ—Ä–≤—ã–π —Å–≤–æ–¥ –∑–∞–∫–æ–Ω–æ–≤ ‚Äî '–†—É—Å—Å–∫–∞—è –ü—Ä–∞–≤–¥–∞'\n"
                    "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫—É–ª—å—Ç—É—Ä—É –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–≤—è–∑–∏\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤–∞–ª –≥–æ—Ä–æ–¥–∞, —Å—Ç—Ä–æ–∏–ª —Ö—Ä–∞–º—ã, —É–∫—Ä–µ–ø–ª—è–ª –†—É—Å—å\n\n"
                    "üèÖ –ï–≥–æ –∏–º—è ‚Äî —Å–∏–º–≤–æ–ª –º—É–¥—Ä–æ—Å—Ç–∏, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã!"
                ),
                'image_url': "Materials/history_city/yaroslav.jpg"
            }
        }
        return test_data.get(topic) 